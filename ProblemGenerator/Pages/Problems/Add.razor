@using ProblemGenerator.Controllers;
@using ProblemGenerator.Data;
@inject ProblemContext problemContext 
@inject ProblemServices service
@inject NavigationManager NavigationManager
@inject IConfiguration config
@page "/Problems/Add"



<PageTitle>@Loc["Add_Add a problem"]</PageTitle> 
<MyCardComponent Title="Add_Add a problem">
    <EditForm Model="@NewProblem"  OnValidSubmit="AddNewProblem">
        <DataAnnotationsValidator/>
        <div class="form-group" style="padding: 5px 5px 5px 5px;">
            <label>@Loc["Add_What"]</label>                
            <input type="text" class="form-control" @bind-value="@NewProblem.What" placeholder="@Loc["Add_What happened?"]"/>
            
            @if (@validChecker == true && NewProblem.What == "")
            {
                <h5 style="color: red;">@Loc["Val_Field is required"]</h5>
            }
            @if(@validChecker == true && NewProblem.What.Length < 2)
            {
                <h5 style="color: red;">@Loc["Val_Must be at least 2 characters"]</h5>
            }
            @if (@validChecker == true && NewProblem.What.Length > 30)
            {
                <h5 style="color: red;">@Loc["Val_Can't be longer than 30 characters"]</h5>
            }

        </div>

        <div class="form-group" style="padding: 5px 5px 5px 5px;">
            <label for="name">@Loc["Add_Where"]</label>
            <input type="text" id="where" class="form-control" @bind-value="@NewProblem.Where" placeholder="@Loc["Add_Where did it happen?"]" />
            
            @if (@validChecker == true && NewProblem.Where == "")
            {
                <h5 style="color: red;">@Loc["Val_Field is required"]</h5>
            }
            @if (@validChecker == true && NewProblem.Where.Length < 2)
            {
                <h5 style="color: red;">@Loc["Val_Must be at least 2 characters"]</h5>
            }
            @if (@validChecker == true && NewProblem.Where.Length > 20)
            {
                <h5 style="color: red;">@Loc["Val_Can't be longer than 20 characters"]</h5>
            }
        </div>

        <div class="form-group" style="padding: 5px 5px 5px 5px;">           
            <label for="name">@Loc["Add_Priority"]</label>            
                <InputNumber class="form-control" min="1" max="5" @bind-Value="@NewProblem.problemPriority"/>
            
                    <span class="form-text">@Loc["Add_ - 1 - least important"]</span>
            
            @if (@validChecker == true && NewProblem.problemPriority < 1)
            {
                <h5 style="color: red;">@Loc["Val_Minumum value is 1"]</h5>
            }
            @if (@validChecker == true && NewProblem.problemPriority > 5)
            {
                <h5 style="color: red;">@Loc["Val_Maximum value is 5"]</h5>
            }
        </div>

        <div class="form-group" style="padding: 5px 5px 5px 5px;">
            <label for="name">@Loc["Add_Detailed description"]</label>
            <InputTextArea class="form-control" @bind-Value="@NewProblem.DetailedDescription" placeholder="@Loc["Add_Place for any additional details"]" />
            
            @if (@validChecker == true && NewProblem.Where.Length > 500)
            {
                <h5 style="color: red;">@Loc["Val_Can't be longer than 500 characters"]</h5>
            }
        </div>

        <div class="form-group" style="padding: 5px 5px 5px 5px;">
            <label>@Loc["Add_Problem picture"]:</label>
            <InputFile OnChange="@LoadFiles" class="form-control" multiple="maxAllowedFiles" accept=".png,.jpg,.jpeg" /> @*multiple for more than 1 photo*@
        </div>
        
        <div class="text-center p-3 mb-3">
                <button class="btn btn-info" type="button" @onclick=getBack>@Loc["Edit_discard"]</button>
            <button class="btn btn-info" type="submit" @onclick="checkerSwitch">@Loc["Add_Add a problem"]</button>
            
        </div>
        
     </EditForm>
</MyCardComponent>


@code {
    private long maxFileSize = 1024 * 1024 * 6; //6 MB
    private int maxAllowedFiles = 3;
    private string imgPath = "";
    private IBrowserFile? file;
    private List<string> errors = new();
    public Problem NewProblem { get; set; } = new Problem();
    private bool validChecker = false;

    private void checkerSwitch()
    {
        validChecker = true;
    }

    private void getBack()
    {
        NavigationManager.NavigateTo("/Problems/ViewProblems", true);
    }

    private async Task AddNewProblem()
    {
        NewProblem.DateCreated = DateTime.Now;
        //string relativePath = await CaptureFile();
        //NewProblem.ImgPath = Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
        NewProblem.ImgPath = imgPath;
        await service.AddNewProblem(NewProblem);
        //NewProblem = new Problem();
        //await RefreshProblems();
        logger.addLog($"Added new problem: id:{NewProblem.Id}, what: {NewProblem.What}, where: {NewProblem.Where}, detailed description: {NewProblem.DetailedDescription}, image: {NewProblem.ImgPath}");
        NavigationManager.NavigateTo("/Problems/ViewProblems", true);
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        int i = e.FileCount;
        /*
        if (file is null)
        {
            return "";
        }
        */
        try
        {
            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                  

                string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
                string path = Path.Combine(config.GetValue<string>("FileStorage")!, $"{DateTime.Today.ToString("d")}", newFileName);
                string relativePath = Path.Combine($"{DateTime.Today.ToString("d")}", newFileName);
                Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, $"{DateTime.Today.ToString("d")}"));

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                string imgPathPart = Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
                if(i == e.FileCount) imgPath += i; //control number 
                imgPath += imgPathPart; // path
                if (i > 1) imgPath += "#*#"; //split sign
                i--;
                            
            }
        }
        catch (Exception ex)
        {
            logger.addLog($"File: {file.Name} Error: {ex.Message}");
            throw;
        }

    }
    

}
