@using ProblemGenerator.Controllers;
@using ProblemGenerator.Data;
@inject ProblemContext problemContext 
@inject ProblemServices service
@inject NavigationManager NavigationManager
@inject IConfiguration config
@page "/Problems/Add"



<PageTitle>@Loc["Add_Add a problem"]</PageTitle> 
<MyCardComponent Title="Add_Add a problem">
    <EditForm Model="@NewProblem" OnValidSubmit="AddNewProblem">
        <DataAnnotationsValidator/>
        <div class="form-group" style="padding: 5px 5px 5px 5px;">
            <label>@Loc["Add_What"]</label>                
            <input type="text" class="form-control" @bind-value="@NewProblem.What" placeholder="@Loc["Add_What happened?"]"/>
            <ValidationMessage For="@(() => NewProblem.What)" />
        </div>

        <div class="form-group" style="padding: 5px 5px 5px 5px;">
            <label for="name">@Loc["Add_Where"]</label>
            <input type="text" id="where" class="form-control" @bind-value="@NewProblem.Where" placeholder="@Loc["Add_Where did it happen?"]" />
            <ValidationMessage For="@(() => NewProblem.Where)" />
        </div>

        <div class="form-group" style="padding: 5px 5px 5px 5px;">           
            <label for="name">@Loc["Add_Priority"]</label>            
                <InputNumber class="form-control" min="1" max="5" @bind-Value="@NewProblem.problemPriority"/>
            <ValidationMessage For="@(() => NewProblem.problemPriority)" />
                    <span class="form-text">@Loc["Add_ - 1 - least important"]</span>
        </div>

        <div class="form-group" style="padding: 5px 5px 5px 5px;">
            <label for="name">@Loc["Add_Detailed description"]</label>
            <InputTextArea class="form-control" @bind-Value="@NewProblem.DetailedDescription" placeholder="@Loc["Add_Place for any additional details"]" />
            <ValidationMessage For="@(() => NewProblem.DetailedDescription)" />
        </div>

        <div class="form-group" style="padding: 5px 5px 5px 5px;">
            <label>@Loc["Add_Problem picture"]:</label>
            <InputFile OnChange="@LoadFiles" class="form-control" accept=".png,.jpg,.jpeg" /> @*multiple for more than 1 photo*@
        </div>
        
        <div class="text-center p-3 mb-3">
                <button class="btn btn-info" type="button" @onclick=getBack>@Loc["Edit_discard"]</button>
                <button class="btn btn-info" type="submit">@Loc["Add_Add a problem"]</button>
            <ValidationSummary/>
        </div>
        
     </EditForm>
</MyCardComponent>


@code {
    private long maxFileSize = 1024 * 1024 * 6; //3 MB
    private IBrowserFile? file;
    private List<string> errors = new();
    public Problem NewProblem { get; set; } = new Problem();

    private void getBack()
    {
        NavigationManager.NavigateTo("/Problems/ViewProblems", true);
    }

    private async Task AddNewProblem()
    {
        NewProblem.DateCreated = DateTime.Now;
        string relativePath = await CaptureFile();
        NewProblem.ImgPath = Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);

        await service.AddNewProblem(NewProblem);
        //NewProblem = new Problem();
        //await RefreshProblems();
        logger.addLog($"Added new problem: id:{NewProblem.Id}, what: {NewProblem.What}, where: {NewProblem.Where}, detailed description: {NewProblem.DetailedDescription}, image: {NewProblem.ImgPath}");
        NavigationManager.NavigateTo("/Problems/ViewProblems", true);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }

        try
        {
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
            string path = Path.Combine(config.GetValue<string>("FileStorage")!, $"{DateTime.Today.ToString("d")}", newFileName);
            string relativePath = Path.Combine($"{DateTime.Today.ToString("d")}", newFileName);
            Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, $"{DateTime.Today.ToString("d")}"));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;

        }
        catch (Exception ex)
        {
            logger.addLog($"File: {file.Name} Error: {ex.Message}");
            throw;
        }

    }

    //List<Problem> Problems = new List<Problem>();
    /*
    protected override async Task OnInitializedAsync()
    {
        await RefreshProblems();
    }

    private async Task RefreshProblems()
    {
        Problems = await service.GetProblemsAsync();
    }
    */
    /*
    Problem UpdateProblem = new Problem();
    private void SetProblemForUpdate(Problem problem)
    {
        UpdateProblem = problem;
    }
    
    private async Task UpdateProblemData()
    {
        await service.UpdateProblemAsync(UpdateProblem);
        await RefreshProblems();
    }

    private async Task DeleteProblem(Problem problem)
    {
        await service.DeleteProblemAsync(problem);
        await RefreshProblems();
    }
    */

    
    

}
