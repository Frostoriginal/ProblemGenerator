@page "/Problems/Details/{Id:int}"
@using Microsoft.AspNetCore.Components;
@using ProblemGenerator.Controllers;
@using ProblemGenerator.Data;
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject ProblemServices service
@inject IJSRuntime JsRuntime


<div class="main"> 
    @if (invalidId)
    {
        <h2>Problem not found</h2>
    }
    
    else if (problem == null)
    {
        <h2>Problem not found</h2>
    }
    

    else
    { 
        <div class="row">
            <MyCardComponent Title="Loc_Details">
                <MyCardComponentEntry Title="Problem_What" Entry="@problem.What" />
                <MyCardComponentEntry Title="Problem_Where" Entry="@problem.Where" />
                <MyCardComponentEntry Title="Problem_Date created" Entry="@problem.DateCreated.Date.ToString("dd.MM.yyyy")" />
                @if (problem.IsSolved == true)
                {
                <MyCardComponentEntry Title="Problem_Date solved" Entry="@problem.DateSolved.Date.ToString("dd.MM.yyyy")" />                    
                }
                else
                {
                int daysElapsed = problem.TimeElapsed.Days * -1;
                <MyCardComponentEntry Title="Problem_Days elapsed" Entry="@daysElapsed.ToString()" />                    
                }
                <MyCardComponentEntry Title="Problem_Priority" Entry="@problem.problemPriority.ToString()" />
                <MyCardComponentEntry Title="Add_Detailed description" Entry="@problem.DetailedDescription" />
            </MyCardComponent>


            
            <MyCardComponent Title="Loc_Photos">
                <div class="bg-light" style=" border-radius: 5px;">
                    <div style="padding: 5px 5px 5px 5px; ">                        
                        @if (imagePaths != null)
                        {
                            foreach (var item in imagePaths)
                            {
                                <img class="img-fluid max-width: 100%;" style="padding: 5px 5px 5px 5px;" alt="@Loc[" Details_problem no photo"]" src="@item" align="middle">
                            }
                        }
                        else
                        {
                            <h3>"@Loc["Details_problem no photo"]"</h3>               
                        }
                    </div>
                </div>
            </MyCardComponent>

            <MyCardComponent Title="Loc_Manage">
                 <div class="btn-group-vertical" style="padding: 5px 5px 5px 5px;">
                     <button class="btn btn-info" @onclick="MarkAsDone" disabled="@disabledMarkAsDone">@Loc["Details_Mark as done"]</button>
                     <button class="btn btn-info" @onclick="MoveToCurrent" disabled="@disabledMoveToCurrent">@Loc["Details_Move to current"]</button>
                     <button class="btn btn-info" @onclick="MoveToArchive" disabled="@disabledArchive">@Loc["Details_Archive"]</button>
                     <button class="btn btn-info" @onclick="EditProblem" disabled="@disabledEdit">@Loc["Details_Edit"]</button>
                     <button class="btn btn-info" @onclick="DeleteProblem" disabled="@disabledDelete">@Loc["Details_Delete"]</button>
                     <button class="btn btn-info" @onclick=getBack>@Loc["Details_Getback"]</button>
                 </div>
            </MyCardComponent>
        </div>         
    }
</div>





@code {
    [Parameter] public int Id { get; set; }

    Problem problem;
    bool invalidId = false;
    List<Problem> Problems = new List<Problem>();
    List<string> imagePaths = new List<string>();
    
    bool disabledMarkAsDone = true;
    bool disabledMoveToCurrent = true;
    bool disabledEdit = true;
    bool disabledArchive = true;
    bool disabledDelete = true;

    private void resolveImages()
    {
        if (problem.ImgPath != null && problem.ImgPath != "")
        {
            if(problem.ImgPath[0] == 1)
            {
                imagePaths.Add(problem.ImgPath.Substring(1));
            }
            if (problem.ImgPath[0] > 1)
            {
                imagePaths = problem.ImgPath.Substring(1).Split("#*#").ToList();
            }
        }    

    }

    private void getBack()
    {
        if (problem.IsSolved == true && problem.IsArchived==false){
            NavigationManager.NavigateTo($"/Problems/doneproblems", true);
        }
        else if(problem.IsArchived == true)
        {
            NavigationManager.NavigateTo($"/Problems/archive", true);
        }
        else NavigationManager.NavigateTo($"/Problems/ViewProblems", true);
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            problem = Problems.FirstOrDefault(s => s.Id == Id);
            if(problem != null)
            {
                if (problem.IsSolved == false){
                    disabledMarkAsDone = false;
                    disabledEdit = false;
                }
                if (problem.IsSolved == true){
                    disabledMoveToCurrent = false;
                    disabledArchive = false;
                }

                if (problem.IsArchived == true){
                    disabledDelete = false; 
                    disabledMarkAsDone = true; 
                    disabledArchive = true;
                }
            }
            resolveImages();
            
        }
        catch (Exception ex)
        {
            invalidId = true;
            Console.Error.WriteLine(ex);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await RefreshProblems();
    }

    private async Task RefreshProblems()
    {
        Problems = await service.GetProblemsAsync();
    }

    private async Task MarkAsDone()
    {
        problem.IsSolved = true;
        problem.DateSolved = DateTime.Now;
        await service.UpdateProblemAsync(problem);
        logger.addLog($"Marked as done: id:{problem.Id}, what: {problem.What}, where: {problem.Where}, detailed description: {problem.DetailedDescription}, image: {problem.ImgPath}");

        NavigationManager.NavigateTo("/Problems/doneproblems", true);
    }

    private async Task MoveToCurrent()
    {
        problem.IsSolved = false;
        await service.UpdateProblemAsync(problem);
        logger.addLog($"Moved back to current problems: id:{problem.Id}, what: {problem.What}, where: {problem.Where}, detailed description: {problem.DetailedDescription}, image: {problem.ImgPath}");

        NavigationManager.NavigateTo("/Problems/ViewProblems", true);
    }

    private async Task MoveToArchive()
    {
        problem.IsArchived = true;
        await service.UpdateProblemAsync(problem);
        logger.addLog($"Moved to archive: id:{problem.Id}, what: {problem.What}, where: {problem.Where}, detailed description: {problem.DetailedDescription}, image: {problem.ImgPath}");

        NavigationManager.NavigateTo("/Problems/archive", true);
    }

    private async Task DeleteProblem()
    {
        await service.DeleteProblemAsync(problem);
        //implement photos removal
        logger.addLog($"Deleted problem: id:{problem.Id}, what: {problem.What}, where: {problem.Where}, detailed description: {problem.DetailedDescription}, image: {problem.ImgPath}");

        NavigationManager.NavigateTo("/Problems/archive", true);
    }

    private void EditProblem()
    {
        NavigationManager.NavigateTo($"/Problems/edit/{problem.Id}", true);
    }
    
}