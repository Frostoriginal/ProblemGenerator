@page "/Problems/doneproblems"
@using ProblemGenerator;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PageTitle>@Loc["Index_Done problems"]</PageTitle>


@*Top bar*@
<ul class="list-inline">
    <li class="list-inline-item"><h3>@Loc["Index_Done problems"]</h3></li>
    <div style="float:right;">
    <li class="list-inline-item">
        <div>

            <input type="text" placeholder="@Loc["Index_search_placeholder"]" @bind-value="searchWord" />
            <button class="btn btn-primary" @onclick="() => searchByInput(searchWord)"><i class="oi oi-magnifying-glass"></i></button>

        </div>
    </li>

    <li class="list-inline-item">
        <div style="align:right">
            <span>@Loc["Index_Sort by"]:</span>
            <form class="form-check-inline">
                <select class="form-control mr-2" @bind="sortMethodNumber">
                    <option style="cursor:pointer" value="1" @onclick="() => sortByMethod(1)">@Loc["Sort_Priority top first"]</option>
                    <option style="cursor:pointer" value="2" @onclick="() => sortByMethod(2)">@Loc["Sort_Descending"]</option>
                    <option style="cursor:pointer" value="3" @onclick="() => sortByMethod(3)">@Loc["Sort_Ascending"]</option>
                </select>

            </form>
            <button class="btn btn-primary" @onclick="() => sortByMethod(sortMethodNumber)"><i class="oi oi-sort-ascending"></i></button>
        </div>
    </li>
    </div>
</ul>

<hr />
@if (finishedLoading)
{

    @if (viewProblems != null)
    {
        <div class="row">
            @foreach (var problem in viewProblems) //newest first// problems.Where(s => s.IsSolved == false).OrderBy(s => s.DateCreated).Reverse()
            {
                <MyCardProblem problem="problem" />
            }
        </div>


        if (viewProblems.Count == 0)
        {
            <h1>@Loc["Index_No problems found!"]</h1>
        }
    }
    else
    {
        <h1>@Loc["Index_No problems found!"]</h1>
    }

}




@code {

    List<Problem> problems = new();
    List<Problem> viewProblems = new();
    bool finishedLoading = false;
    int sortMethodNumber = 1;

    //private string sortBy = "Priority top first";//default sort
    string searchWord = "";

    protected override async Task OnInitializedAsync()
    {
        problems = await HttpClient.GetFromJsonAsync<List<Problem>>(NavigationManager.BaseUri + "problems");
        problems = problems.Where(s => s.IsSolved == true && s.IsArchived == false).ToList(); //switch for solved and unarchived only
        sortByMethod(1);
        finishedLoading = true;
    }

    private void viewDetails(int ProblemId)
    {
        NavigationManager.NavigateTo($"/Problems/details/{ProblemId}", true);
    }

    private void sortByMethod(int id)
    {
        if (id == 1) viewProblems = problems.OrderBy(s => s.problemPriority).Reverse().ToList();
        if (id == 2) viewProblems = problems.OrderBy(s => s.DateCreated).Reverse().ToList();
        if (id == 3) viewProblems = problems.OrderBy(s => s.DateCreated).ToList();
    }

    private void searchByInput(string input)
    {
        if (input != null && input != "") viewProblems = problems.Where(s => s.IsSolved == false).Where(w => w.What.Contains(input) || w.Where.Contains(input) || w.DetailedDescription.Contains(input)).ToList();
        else viewProblems = problems.Where(s => s.IsSolved == false).OrderBy(s => s.problemPriority).Reverse().ToList();
    }

}

