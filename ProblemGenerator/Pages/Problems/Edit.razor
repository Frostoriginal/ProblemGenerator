@using ProblemGenerator.Controllers;
@using ProblemGenerator.Data;
@inject ProblemContext problemContext
@inject ProblemServices service
@inject NavigationManager NavigationManager
@inject IConfiguration config
@page "/Problems/Edit/{Id:int}"



<PageTitle>@Loc["Edit_Edit problem"]</PageTitle>
<MyCardComponent Title="Edit_Edit problem">
    <EditForm Model="@problem" OnValidSubmit="UpdateProblemData">
        <DataAnnotationsValidator />
                
        <div class="form-group" style="padding: 5px 5px 5px 5px;">
            <label>@Loc["Add_What"]</label>
            <input type="text" class="form-control" @bind-value="@problem.What"/>
            @if (@validChecker == true && problem.What == "")
            {
                <h5 style="color: red;">@Loc["Val_Field is required"]</h5>
            }
            @if (@validChecker == true && problem.What.Length < 2)
            {
                <h5 style="color: red;">@Loc["Val_Must be at least 2 characters"]</h5>
            }
            @if (@validChecker == true && problem.What.Length > 30)
            {
                <h5 style="color: red;">@Loc["Val_Can't be longer than 30 characters"]</h5>
            }
        </div>
                
        <div class="form-group" style="padding: 5px 5px 5px 5px;">
            <label for="name">@Loc["Add_Where"]</label>
            <input type="text" id="where" class="form-control" @bind-value="@problem.Where"/>
            @if (@validChecker == true && problem.Where == "")
            {
                <h5 style="color: red;">@Loc["Val_Field is required"]</h5>
            }
            @if (@validChecker == true && problem.Where.Length < 2)
            {
                <h5 style="color: red;">@Loc["Val_Must be at least 2 characters"]</h5>
            }
            @if (@validChecker == true && problem.Where.Length > 20)
            {
                <h5 style="color: red;">@Loc["Val_Can't be longer than 20 characters"]</h5>
            }
        </div>

        <div class="form-group" style="padding: 5px 5px 5px 5px;">           
            <label for="name">@Loc["Add_Priority"]</label>            
            <InputNumber class="form-control" min="1" max="5" @bind-Value="@problem.problemPriority"/>
            
            <span class="form-text">@Loc["Add_ - 1 - least important"]</span>
            @if (@validChecker == true && problem.problemPriority < 1)
            {
                <h5 style="color: red;">@Loc["Val_Minumum value is 1"]</h5>
            }
            @if (@validChecker == true && problem.problemPriority > 5)
            {
                <h5 style="color: red;">@Loc["Val_Maximum value is 5"]</h5>
            }
        </div>

        <div class="form-group" style="padding: 5px 5px 5px 5px;">
            <label for="name">@Loc["Add_Detailed description"]</label>
            <InputTextArea class="form-control" @bind-Value="@problem.DetailedDescription"/>
            @if (@validChecker == true && problem.Where.Length > 500)
            {
                <h5 style="color: red;">@Loc["Val_Can't be longer than 500 characters"]</h5>
            }
        </div>
        @* to do later - update directories on load
        <div class="form-group" style="padding: 5px 5px 5px 5px;">
            <label>Problem picture:</label>
            <InputFile OnChange="@LoadFiles" class="form-control" multiple accept=".png,.jpg,.jpeg" />
        </div>
        *@

        <div class="text-center p-3 mb-3">
                <button class="btn btn-info" type="button" @onclick=getBack >@Loc["Edit_discard"]</button>
            @*  <button class="btn btn-info" @onclick="UpdateProblemData"> Update Problem</button> *@
            <button class="btn btn-info" type="submit" @onclick="checkerSwitch">@Loc["Edit_Update Problem"]</button>
            
        </div>
    </EditForm>
 </MyCardComponent>




@code {
    [Parameter] public int Id { get; set; }

    Problem problem;
    bool invalidId = false;
    private long maxFileSize = 1024 * 1024 * 3; //3 MB
    private IBrowserFile? file;
    
    List<Problem> Problems = new List<Problem>();

    private void getBack()
    {
        NavigationManager.NavigateTo($"/Problems/details/{Id}", true);
    }

    private bool validChecker = false;

    private void checkerSwitch()
    {
        validChecker = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
           problem = Problems.FirstOrDefault(s => s.Id == Id);

        }
        catch (Exception ex)
        {
            invalidId = true;
            Console.Error.WriteLine(ex);
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await RefreshProblems();
    }

    private async Task RefreshProblems()
    {
        Problems = await service.GetProblemsAsync();
    }
       
    Problem UpdateProblem = new Problem();
    private void SetProblemForUpdate(Problem problem)
    {
        UpdateProblem = problem;
    }

    private async Task UpdateProblemData()
    {
        SetProblemForUpdate(problem);
        await service.UpdateProblemAsync(UpdateProblem);        
        NavigationManager.NavigateTo("/Problems/ViewProblems/", true);
    }      

}
