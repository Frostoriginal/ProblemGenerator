@page "/Tasks/Details/{Id:int}"
@using Microsoft.AspNetCore.Components;
@using ProblemGenerator.Controllers;
@using ProblemGenerator.Data;
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject ProblemServices service


@if (invalidId){<h2>Problem not found</h2>    }
else if (problem == null){<h2>Problem not found</h2>}
else
{
    <div class="row">
        <MyCardComponent Title="Loc_Details">
            <MyCardComponentEntry Title="Problem_What" Entry="@problem.What" />
            <MyCardComponentEntry Title="Problem_Where" Entry="@problem.Where" />
            <MyCardComponentEntry Title="Problem_Date created" Entry="@problem.DateCreated.Date.ToString("dd.MM.yyyy")" />
            <MyCardComponentEntry Title="Problem_Priority" Entry="@problem.problemPriority.ToString()" />
            <MyCardComponentEntry Title="Add_Detailed description" Entry="@problem.DetailedDescription" />
        </MyCardComponent>      
            
        <MyCardComponent Title="Loc_Repeat">  
            <MyCardComponentEntry Title="Repeat from" Entry="@problem.startFromDate.Date.ToString("dd.MM.yyyy")" />
            <MyCardComponentEntry Title="Repeat summary" Entry="@repeatDescriptionString" />
            <MyCardComponentEntry Title="Is it already added?" Entry="@isItAdded" />
            <MyCardComponentEntry Title="Is it paused?" Entry="@isItPaused" />
        </MyCardComponent>
        <MyCardComponent Title="Loc_Manage">
            <div class="btn-group-vertical" style="padding: 5px 5px 5px 5px;"> 
                <button class="btn btn-info" @onclick="EditProblem">@Loc["Details_Edit"]</button>
                <button class="btn btn-info" @onclick="DeleteProblem">@Loc["Details_Delete"]</button>
                <button class="btn btn-info" @onclick=getBack>@Loc["Details_Getback"]</button>
                    @if (problem.isPausedTask == true){  <button class="btn btn-info" @onclick=pauseTask>@Loc["Details_Start task"]</button>}
                    else{                                <button class="btn btn-info" @onclick=pauseTask>@Loc["Details_Pause task"]</button>}
                <button class="btn btn-info" @onclick=addManually disabled="@IsItAddedSwitch">@Loc["Details_Add manually"]</button>
            </div>  
        </MyCardComponent>    
    </div>
}


@code {
    [Parameter] public int Id { get; set; }

    Problem problem;
    bool invalidId = false;
    List<Problem> Problems = new List<Problem>();

    bool disabledMarkAsDone = true;
    bool disabledMoveToCurrent = true;
    bool disabledEdit = true;
    bool disabledArchive = true;
    bool disabledDelete = true;

    bool IsItAddedSwitch = false;
    string isItAdded = "";
    string isItPaused = "";

    private async Task pauseTask()
    {
       
        if (problem.isPausedTask == false) problem.isPausedTask = true;
        else problem.isPausedTask = false;
        await service.UpdateProblemAsync(problem);
        logger.addLog($"Changed \"{problem.What}\" paused status to {problem.isPausedTask}");
        NavigationManager.NavigateTo("/Tasks/Recurrent_view", true);
    }
    
    private async Task addManually()
    {
        problem.lastTimeAdded = DateTime.Now;
        Problem copy = new Problem()
            {
                What = problem.What,
                Where = problem.Where,
                DetailedDescription = problem.DetailedDescription,
                DateCreated = DateTime.Now.Date,
                IsSolved = false,
                IsArchived = false,
                problemPriority = problem.problemPriority,
                isRecurrentTask = false,
            };

        await service.AddNewProblem(copy);
        logger.addLog($"Added problem manually from recurrent task: Id: {copy.Id}, what: {copy.What}, where {copy.Where}, desription: {copy.DetailedDescription}");
        NavigationManager.NavigateTo("/Problems/ViewProblems", true);
    }
    
  

    private void getBack()
    {
        NavigationManager.NavigateTo("/Tasks/Recurrent_view", true);
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            problem = Problems.FirstOrDefault(s => s.Id == Id);
            if(problem != null)
            {
                // set parameters to variables here
                if (problem.isPausedTask) isItPaused = "yes"; // localize!
                else isItPaused = "no";
                IsItAddedSwitch = Problems.Where(s => s.IsSolved == false && s.isRecurrentTask == false).ToList().Exists(x => x.What == problem.What);
                if(IsItAddedSwitch) isItAdded = "yes";
                else isItAdded = "no";
                updateBools();
            }
        }
        catch (Exception ex)
        {
            invalidId = true;
            Console.Error.WriteLine(ex);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await RefreshProblems();
    }

    private async Task RefreshProblems()
    {
        Problems = await service.GetProblemsAsync();
    }
       

    private async Task DeleteProblem()
    {
        await service.DeleteProblemAsync(problem);
        //implement photos removal
        logger.addLog($"Deleted task: id:{problem.Id}, what: {problem.What}, where: {problem.Where}, detailed description: {problem.DetailedDescription}, image: {problem.ImgPath}");
        NavigationManager.NavigateTo("/Tasks/Recurrent_view", true);
    }

    private void EditProblem()
    {
        NavigationManager.NavigateTo($"/Tasks/TaskEdit/{problem.Id}", true);
    }

    private int repeatBy = 1;
    private string repeatByString = "";
    private int DaysBeforeRepetition = 0;
    private string repeatDescriptionString = "";

    private bool repeatOnMondaySwitch = false;
    private bool repeatOnTuesdaySwitch = false;
    private bool repeatOnWednesdaySwitch = false;
    private bool repeatOnThursdaySwitch = false;
    private bool repeatOnFridaySwitch = false;
    private bool repeatOnSaturdaySwitch = false;
    private bool repeatOnSundaySwitch = false;

    private bool noDaySelected = false;
    private bool repeatEveryday = true;
    private bool repeatWeekly = false;
    private bool repeatMonthly = false;
    private bool repeatYearly = false;

    private DateTime startFromDate;
    private DateTime repeatOnDate;


    private Task updateBools()
    {
        repeatOnMondaySwitch = problem.repeatOnMonday;
        repeatOnTuesdaySwitch = problem.repeatOnTuesday;
        repeatOnWednesdaySwitch = problem.repeatOnWednesday;
        repeatOnThursdaySwitch = problem.repeatOnThursday;
        repeatOnFridaySwitch = problem.repeatOnFriday;
        repeatOnSaturdaySwitch = problem.repeatOnSaturday;
        repeatOnSundaySwitch = problem.repeatOnSunday;

        repeatEveryday = problem.repeatedDaily;
        repeatWeekly = problem.repeatedWeekly;
        repeatMonthly = problem.repeatedMonthly;
        repeatYearly = problem.repeatedYearly;
        DaysBeforeRepetition = problem.daysBeforeRepetition;
        startFromDate = problem.startFromDate;
        repeatOnDate = problem.repeatOnDate;

        if (repeatEveryday)
            {
            repeatByString = @Loc["Rec_Day"];
            repeatBy = problem.daysBeforeRepetition+1;
        }

        if (repeatWeekly)
            {
            repeatByString = @Loc["Rec_Week"];
            repeatBy = (problem.daysBeforeRepetition + 1) / 7;
        }

        if (repeatMonthly)
            {
            repeatByString = @Loc["Rec_Month"];
            repeatBy = (problem.daysBeforeRepetition + 1) / 28;
        }
        if (repeatYearly)
            {
            repeatByString = @Loc["Rec_Year"];
            repeatBy = (problem.daysBeforeRepetition + 1) / 365;
        }

        updateDescriptionString();
        return Task.CompletedTask;
    }
    
    private void updateDescriptionString()
        {
        repeatDescriptionString = ""; //reset

        //daily
        if (repeatByString == @Loc["Rec_Day"] || repeatByString == @Loc["Rec_Days"])
            {
            if (repeatEveryday && repeatBy == 1) repeatDescriptionString += @Loc["Rec_everyday"];
            if (repeatBy > 1) repeatDescriptionString += @Loc[$"Rec_every"] + $" {repeatBy} " + @Loc["Rec_Days_L"];
        }
        //weekly
        if (repeatByString == @Loc["Rec_Week"] || repeatByString == @Loc["Rec_Weeks"])
            {
            if (repeatOnMondaySwitch == true && repeatOnTuesdaySwitch == true && repeatOnWednesdaySwitch == true && repeatOnThursdaySwitch == true && repeatOnFridaySwitch == true && repeatOnSaturdaySwitch == true && repeatOnSundaySwitch == true) repeatEveryday = true;
            else repeatEveryday = false;
            if (repeatOnMondaySwitch == false && repeatOnTuesdaySwitch == false && repeatOnWednesdaySwitch == false && repeatOnThursdaySwitch == false && repeatOnFridaySwitch == false && repeatOnSaturdaySwitch == false && repeatOnSundaySwitch == false) noDaySelected = true;
            else noDaySelected = false;
            if (repeatEveryday != true)
                {
                if (repeatBy == 1)
                    {
                    repeatDescriptionString += @Loc["Rec_Weekly"];
                }
                if (repeatBy > 1)
                    {
                    repeatDescriptionString += @Loc[$"Rec_every"] + $" {repeatBy} " + @Loc["Rec_Weeks_L"];
                }
                if (noDaySelected != true)
                    {
                    repeatDescriptionString += " ";
                    if (repeatOnTuesdaySwitch == true && repeatOnMondaySwitch == false && repeatOnWednesdaySwitch == false && repeatOnThursdaySwitch == false && repeatOnFridaySwitch == false && repeatOnSaturdaySwitch == false && repeatOnSundaySwitch == false) repeatDescriptionString += Loc["Rec_on_t"] + ": ";
                    else repeatDescriptionString += Loc["Rec_on"] + ": ";
                    if (repeatOnMondaySwitch) repeatDescriptionString += Loc["Rec_monday"] + ", ";
                    if (repeatOnTuesdaySwitch) repeatDescriptionString += Loc["Rec_tuesday"] + ", ";
                    if (repeatOnWednesdaySwitch) repeatDescriptionString += Loc["Rec_wednesday"] + ", ";
                    if (repeatOnThursdaySwitch) repeatDescriptionString += Loc["Rec_thursday"] + ", ";
                    if (repeatOnFridaySwitch) repeatDescriptionString += Loc["Rec_friday"] + ", ";
                    if (repeatOnSaturdaySwitch) repeatDescriptionString += Loc["Rec_saturday"] + ", ";
                    if (repeatOnSundaySwitch) repeatDescriptionString += Loc["Rec_sunday"] + ", ";
            }
            }
            else
                {
                if (repeatBy == 1) repeatDescriptionString += Loc[$"Rec_everyday"];
                if (repeatBy > 1) repeatDescriptionString += @Loc[$"Rec_every"] + $" {repeatBy} " + @Loc["Rec_Weeks_L"];
        }
        }
        //monthly
        if (repeatByString == @Loc["Rec_Month"] || repeatByString == @Loc["Rec_Months"])
            {

            if (repeatBy == 1)
                {
                repeatDescriptionString += @Loc["Rec_every month on"] + " " + @Loc["Rec_day_month"] + ": ";
            }
            if (repeatBy > 1)
                {
                repeatDescriptionString += @Loc[$"Rec_every"] + $" {repeatBy} " + @Loc["Rec_Months_L"] + " " + @Loc["Rec_on"] + " " + @Loc["Rec_day_month"] + ": ";
            }
            if (startFromDate == repeatOnDate) repeatDescriptionString += $"{startFromDate.Day}";
            else repeatDescriptionString += $"{repeatOnDate.Day}";
        }
        //yearly
        if (repeatByString == @Loc["Rec_Year"] || repeatByString == @Loc["Rec_Years"])
            {
            if (repeatBy == 1)
                {
                repeatDescriptionString += @Loc["Rec_every year on"] + " " + @Loc["Rec_day_year"] + ": ";
            }
            if (repeatBy > 1)
                {
                repeatDescriptionString += @Loc[$"Rec_every"] + $" {repeatBy} " + @Loc["Rec_Years_L"] + " " + Loc["Rec_on"] + " " + @Loc["Rec_day_year"] + ": ";
            }
            if (startFromDate.Date == repeatOnDate.Date) repeatDescriptionString += $"{startFromDate.Day}.{startFromDate.Month}";
            else repeatDescriptionString += $"{repeatOnDate.Day}.{repeatOnDate.Month}";

    }
    }
    /**/
}