@page "/Tasks/Recurrent_View"
@using ProblemGenerator;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<PageTitle>@Loc["Tasks_View"]</PageTitle>

<div class="main">
    @*Top bar*@
    <ul class="list-inline">
        <li class="list-inline-item"><h3>@Loc["Tasks_View"]</h3></li>
        <div style="float:right;">
        <li class="list-inline-item">
            <div>
                <input type="text" placeholder="@Loc["Index_search_placeholder"]" @bind-value="searchWord" />
                <button class="btn btn-primary" @onclick="() => searchByInput(searchWord)"><i class="oi oi-magnifying-glass"></i></button>
            </div>
        </li>

        <li class="list-inline-item">
            <div style="align:right">
                <span>@Loc["Index_Sort by"]:</span>
                <form class="form-check-inline">
                    <select class="form-control mr-2">
                        <option @onclick="() => sortByMethod(1)">@Loc["Sort_Priority top first"]</option>
                        <option @onclick="() => sortByMethod(2)">@Loc["Sort_Descending"]</option> @*Newest first*@
                        <option @onclick="() => sortByMethod(3)">@Loc["Sort_Ascending"]</option> @*Oldest first*@
                    </select>
                </form>
            </div>
        </li>
</div>
    </ul>

<hr />
    @if (finishedLoading)
    {
        @*Tiles with data*@
        @if (viewProblems != null)
        {
            <div class="row">
                @foreach (var problem in viewProblems) //newest first// problems.Where(s => s.IsSolved == false).OrderBy(s => s.DateCreated).Reverse()
                {
                    string color = "";
                    if (problem.problemPriority == 5) color = "darkred"; //color coding by priority and days elapsed
                    if (problem.problemPriority == 4) color = "red";
                    if (problem.problemPriority == 3) color = "indianred";
                    if (problem.problemPriority == 2) color = "lightcoral";
                    int daysElapsed = problem.TimeElapsed.Days * -1;
                    if (daysElapsed > 7) color = "saddlebrown";

                    <div class="col-lg-3 col-md-12 mb-4 mb-lg-0" style=" padding: 5px 5px 5px 5px;">
                        <div class="card" style="border-color:@color; border-style:solid; border-radius: 5px; border-width: 2px;">
                            <ul>
                                <br>
                                <li>@Loc["Problem_What"]: @problem.What</li>
                                <li>@Loc["Problem_Where"]: @problem.Where</li>
                                <li>@Loc["Problem_Date created"]: @problem.DateCreated.ToString("yyyy-MM-dd")</li>
                                <li>@Loc["Problem_Days elapsed"]: @daysElapsed</li>
                                <li>@Loc["Problem_Priority"]: @problem.problemPriority</li>
                            </ul>
                            <button class="btn btn-outline-secondary" style="border-color:@color;" @onclick="() => viewDetails(problem.Id)">@Loc["Problem_View"]</button>
                        </div>

                    </div>
                }
            </div>
            if (viewProblems.Count == 0)
            {
                <h1>@Loc["Index_No problems found!"]</h1>
            }

        }
        else
        {
            <h1>@Loc["Index_No problems found!"]</h1>
        }

    }
</div>



@code {

    List<Problem> problems = new();
    List<Problem> viewProblems = new();

    //private string sortBy = "Priority top first";//default sort
    bool finishedLoading = false;
    string searchWord = "";
    int sortId = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            problems = await HttpClient.GetFromJsonAsync<List<Problem>>(NavigationManager.BaseUri + "problems");
            if (problems != null)
            {
                problems = problems.Where(s => s.isRecurrentTask == true).ToList(); //switch for recurrenttasks
                viewProblems = problems;
                sortByMethod(1);
                finishedLoading = true;
            }

        }
        catch (Exception)
        {

            throw;
        }

    }

    private void viewDetails(int ProblemId)
    {
        NavigationManager.NavigateTo($"/Tasks/details/{ProblemId}", true);
    }

    private void sortByMethod(int id)
    {
        if (id == 1) viewProblems = viewProblems.OrderBy(s => s.problemPriority).Reverse().ToList(); //Priority - top first
        if (id == 2) viewProblems = viewProblems.OrderBy(s => s.DateCreated).Reverse().ToList(); //date added - newest first
        if (id == 3) viewProblems = viewProblems.OrderBy(s => s.DateCreated).ToList(); //date added - oldest first
    }

    private void searchByInput(string input)
    {
        if (input != null && input != "") viewProblems = problems.Where(w => w.What.Contains(input) || w.Where.Contains(input) || w.DetailedDescription.Contains(input)).ToList();
        else
        {
            viewProblems = problems;
            sortByMethod(1);
        }
    }

}

