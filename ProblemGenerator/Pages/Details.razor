@page "/Details/{Id:int}"
@using Microsoft.AspNetCore.Components;
@using ProblemGenerator.Controllers;
@using ProblemGenerator.Data;
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject ProblemServices service



<div class="main">
    @if (invalidId)
    {
        <h2>Order not found</h2>
        <p>We're sorry but this order no longer exists.</p>
    }
    else if (problem == null)
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    <text>Loading...</text>
                </h2>
                <p class="ml-auto mb-0">
                    ...
                </p>
            </div>
        </div>
    }
    else
    {
        <div>
            <div>
                <h2>
                    What: @problem.What
                </h2>
                
                <h2>
                   Where: @problem.Where
                </h2>
                
                   <div style="background-color: yellow; width:18rem; border-style: solid; border-radius: 5px;" >
                        <div style="padding: 5px">
                        @problem.DetailedDescription
                        </div>
                   </div>
                   
                <img src="@problem.ImgPath" width="400">
            
                
                    <div>

                    @if(problem.IsSolved==false)
                    {
                            <div style="padding: 5px 5px 5px 5px;">
                    <button class="btn btn-info" @onclick="MarkAsDone">Mark as done</button>
                    </div>
                    }
                    @if(problem.IsSolved==true)
                    {
                    

                                    <div style="padding: 5px">
                                    <button class="btn btn-info" @onclick="MoveToCurrent">Move to current</button>
                                    </div>
                    }
                        @if (problem.IsArchived == false && problem.IsSolved != false)
                        {           
                                        <div style="padding: 5px">
                                    <button class="btn btn-info" @onclick="MoveToArchive">Archive</button>
                            </div>
                        }
                        
                
                @if(problem.IsArchived == true)
                {                       
                                    <button class="btn btn-info" @onclick="DeleteProblem">Delete</button>                        
                
                }
                </div>
            </div>            
        </div>
    }
</div>



@code {
    [Parameter] public int Id { get; set; }

    Problem problem;
    bool invalidId = false;
    List<Problem> Problems = new List<Problem>();
    

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            problem = Problems.FirstOrDefault(s => s.Id == Id);
           }
        catch (Exception ex)
        {
            invalidId = true;
            Console.Error.WriteLine(ex);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await RefreshProblems();
    }

    private async Task RefreshProblems()
    {
        Problems = await service.GetProblemsAsync();
        
    }

    private async Task MarkAsDone()
    {
        problem.IsSolved = true;
        await service.UpdateProblemAsync(problem);
        NavigationManager.NavigateTo("/doneproblems", true);
    }


    private async Task MoveToCurrent()
    {
        problem.IsSolved = false;
        await service.UpdateProblemAsync(problem);
        NavigationManager.NavigateTo("/", true);
    }

    private async Task MoveToArchive()
    {
        problem.IsArchived = true;
        await service.UpdateProblemAsync(problem);
        NavigationManager.NavigateTo("/archive", true);
    }

    private async Task DeleteProblem()
    {

        await service.DeleteProblemAsync(problem);
        NavigationManager.NavigateTo("/archive", true);
    }

    
}