@page "/Details/{Id:int}"
@using Microsoft.AspNetCore.Components;
@using ProblemGenerator.Controllers;
@using ProblemGenerator.Data;
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject ProblemServices service



<div class="main"> 
    @if (invalidId)
    {
        <h2>Order not found</h2>
        <p>We're sorry but this problem no longer exists.</p>
    }
    else if (problem == null)
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    <text>Loading...</text>
                </h2>
                <p class="ml-auto mb-0">
                    ...
                </p>
            </div>
        </div>
    }
    else
    {
        <div>
            <div>

                <div class="bg-light" style=" width:31rem; border-radius: 5px;">
                <div style="padding: 5px">
                <h3>
                    What:
                </h3>
                <span> @problem.What</span>
                </div>
                </div>

                <div class="bg-light" style=" width:31rem;  border-radius: 5px;">
                <div style="padding: 5px">
                <h3>
                    Where: 
                </h3>
                <span>@problem.Where </span>
                    </div>
                </div>

                <div class="bg-light" style=" width:31rem;  border-radius: 5px;">
                <div style="padding: 5px">
                    <h3>
                        Detailed description:
                    </h3>

                        <span>@problem.DetailedDescription</span>
                        
                   </div>
                   </div>

                <div class="bg-light" style=" width:31rem;  border-radius: 5px;">
                    <div style="padding: 5px 5px 5px 5px; ">
                    <h3>
                        Problem photo:
                    </h3>

                        <img class="img-fluid max-width: 100%;" alt="No photo added"  src="@problem.ImgPath" align="middle"> @*Enlarge photo method? navigate to enlarge/problem.id?*@

                    </div>
                </div>
                <div class="d-grid gap-2 d-md-block" style="padding: 5px">
                      <button class="btn btn-info" @onclick="MarkAsDone" disabled="@disabledMarkAsDone">Mark as done</button>
                      <button class="btn btn-info" @onclick="MoveToCurrent" disabled="@disabledMoveToCurrent">Move to current</button> 
                      <button class="btn btn-info" @onclick="MoveToArchive" disabled="@disabledArchive">Archive</button>
                      <button class="btn btn-info" @onclick="EditProblem" disabled="@disabledEdit">Edit</button>
                      <button class="btn btn-info" @onclick="DeleteProblem" disabled="@disabledDelete">Delete</button>                      
                </div>
            </div>            
        </div>
    }
</div>





@code {
    [Parameter] public int Id { get; set; }

    Problem problem;
    bool invalidId = false;
    List<Problem> Problems = new List<Problem>();

    bool disabledMarkAsDone = true;
    bool disabledMoveToCurrent = true;
    bool disabledEdit = true;
    bool disabledArchive = true;
    bool disabledDelete = true;


    protected override async Task OnParametersSetAsync()
    {
        try
        {
            problem = Problems.FirstOrDefault(s => s.Id == Id);
            if (problem.IsSolved == false){
                disabledMarkAsDone = false;
                disabledEdit = false;
            }
            if (problem.IsSolved == true){
                disabledMoveToCurrent = false;
                disabledArchive = false;
            }
            
            if (problem.IsArchived == true){
                disabledDelete = false; 
                disabledMarkAsDone = true; 
                disabledArchive = true;
            }
        }
        catch (Exception ex)
        {
            invalidId = true;
            Console.Error.WriteLine(ex);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await RefreshProblems();
    }

    private async Task RefreshProblems()
    {
        Problems = await service.GetProblemsAsync();
        
    }

    private async Task MarkAsDone()
    {
        problem.IsSolved = true;
        await service.UpdateProblemAsync(problem);
        NavigationManager.NavigateTo("/doneproblems", true);
    }


    private async Task MoveToCurrent()
    {
        problem.IsSolved = false;
        await service.UpdateProblemAsync(problem);
        NavigationManager.NavigateTo("/", true);
    }

    private async Task MoveToArchive()
    {
        problem.IsArchived = true;
        await service.UpdateProblemAsync(problem);
        NavigationManager.NavigateTo("/archive", true);
    }

    private async Task DeleteProblem()
    {

        await service.DeleteProblemAsync(problem);
        NavigationManager.NavigateTo("/archive", true);
    }

    private void EditProblem(){
        NavigationManager.NavigateTo($"/edit/{problem.Id}", true);
    }
    
}