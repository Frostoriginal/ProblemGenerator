@using ProblemGenerator.Controllers;
@using ProblemGenerator.Data;
@inject ProblemContext problemContext
@inject ProblemServices service
@inject NavigationManager NavigationManager
@inject IConfiguration config
@page "/RecurrentAdd"


<PageTitle>@Loc["Add_Add a recurrent task"]</PageTitle> @*To translate!*@

<div class="col-lg-3 col-md-12 mb-4 mb-lg-0" style=" padding: 5px 5px 5px 5px;">
    <div class="card" style="border-color: lightgray; border-style:solid; border-radius: 5px; border-width: 2px; ">
        <h1 style="padding: 10px 10px 10px 10px; background-color: lightgray;">@Loc["Add_Add a recurrent task"]</h1>

        <EditForm Model="@NewProblem" OnValidSubmit="AddNewProblem">
            <DataAnnotationsValidator />
            <div class="form-group" style="padding: 5px 5px 5px 5px;">
                <label>@Loc["Add_What"]</label>
                <input type="text" class="form-control" @bind-value="@NewProblem.What" placeholder="@Loc["Add_What Must be done?"]" />@*To translate!*@
                <ValidationMessage For="@(() => NewProblem.What)" />
            </div>

            <div class="form-group" style="padding: 5px 5px 5px 5px;">
                <label for="name">@Loc["Add_Where"]</label>
                <input type="text" id="where" class="form-control" @bind-value="@NewProblem.Where" placeholder="@Loc["Add_Where?"]" />@*To translate!*@
                <ValidationMessage For="@(() => NewProblem.Where)" />
            </div>

            <div class="form-group" style="padding: 5px 5px 5px 5px;">
                <label for="name">@Loc["Add_Priority"]</label>
                <InputNumber class="form-control" min="1" max="5" @bind-Value="@NewProblem.problemPriority" />
                <ValidationMessage For="@(() => NewProblem.problemPriority)" />
                <span class="form-text">@Loc["Add_ - 1 - least important"]</span>
            </div>

            <div class="form-group" style="padding: 5px 5px 5px 5px;">
                <label for="name">@Loc["Add_Detailed description"]</label>
                <InputTextArea class="form-control" @bind-Value="@NewProblem.DetailedDescription" placeholder="@Loc["Add_Place for any additional details"]" />
                <ValidationMessage For="@(() => NewProblem.DetailedDescription)" />
            </div>

            @*
                Bool switches here

            *@
           <div class="text-center p-3 mb-3">
               <label>Repeat everyday
                    <InputCheckbox @bind-Value="repeatEveryday" @onclick="setSwitches"></InputCheckbox>
                </label>
                

               <label>Repeat on mondays
                <InputCheckbox @bind-Value="repeatOnMondaySwitch" @onchange="setSwitches"></InputCheckbox>
                </label>
                <label>
                    Repeat on tuesdays
                    <InputCheckbox @bind-Value="repeatOnTuesdaySwitch"></InputCheckbox>
                </label>
                <label>Repeat on wednesdays
                <InputCheckbox @bind-Value="repeatOnWednesdaySwitch" ></InputCheckbox>
                </label>
                <label>
                    Repeat on thursdays
                    <InputCheckbox @bind-Value="repeatOnThursdaySwitch"></InputCheckbox>
                </label>
                <label>Repeat on fridays
                <InputCheckbox @bind-Value="repeatOnFridaySwitch" ></InputCheckbox>
                </label>
                <label>
                    Repeat on saturdays
                    <InputCheckbox @bind-Value="repeatOnSaturdaySwitch"></InputCheckbox>
                </label>
                <label>
                    Repeat on sundays
                    <InputCheckbox @bind-Value="repeatOnSundaySwitch"></InputCheckbox>
                </label>

               </div>
               <h4>@repeatOnMondaySwitch</h4>
               <b>Repeat every day</b>
               <b>Repeat weekly</b>
               <b>Repeat Monthly</b>
               <R>Repeat Yearly</R>
               <b>Repeat on day of week</b>
               <b>Repeat from date</b>
               <b>Repeat every x days</b>

            <div class="text-center p-3 mb-3">
                <button class="btn btn-info" type="button" @onclick=getBack>@Loc["Edit_discard"]</button>
                <button class="btn btn-info" type="submit">@Loc["Add_Add a problem"]</button>
                <ValidationSummary />
            </div>

        </EditForm>

    </div>
</div>



@code {
    private long maxFileSize = 1024 * 1024 * 3; //3 MB
    private IBrowserFile? file;
    private List<string> errors = new();
    public Problem NewProblem { get; set; } = new Problem();

    private bool repeatOnMondaySwitch = false;
    private bool repeatOnTuesdaySwitch = false;
    private bool repeatOnWednesdaySwitch = false;
    private bool repeatOnThursdaySwitch = false;
    private bool repeatOnFridaySwitch = false;
    private bool repeatOnSaturdaySwitch = false;
    private bool repeatOnSundaySwitch = false;

    private bool repeatEveryday = false;

    private void setSwitches()
    {
        if (repeatEveryday)
        {
        repeatOnMondaySwitch = true;
            repeatOnTuesdaySwitch = true;
            repeatOnWednesdaySwitch = true;
    repeatOnThursdaySwitch = true;
            repeatOnFridaySwitch = true;
            repeatOnSaturdaySwitch = true;
            repeatOnSundaySwitch = true;
        }
    }

    private void getBack()
    {
        NavigationManager.NavigateTo("/", true);
    }

    private async Task AddNewProblem()
    {
        NewProblem.DateCreated = DateTime.Now;
        string relativePath = await CaptureFile();
        NewProblem.ImgPath = Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);

        await service.AddNewProblem(NewProblem);        
        NavigationManager.NavigateTo("/", true);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }

        try
        {
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
            string path = Path.Combine(config.GetValue<string>("FileStorage")!, $"{DateTime.Today.ToString("d")}", newFileName);
            string relativePath = Path.Combine($"{DateTime.Today.ToString("d")}", newFileName);
            Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, $"{DateTime.Today.ToString("d")}"));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;

        }
        catch (Exception ex)
        {

            errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }

    }


}
