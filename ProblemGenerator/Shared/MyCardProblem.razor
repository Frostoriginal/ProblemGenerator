@inject NavigationManager NavigationManager

@if (true)
{
    string color = "#f3f6f9";
    int daysElapsed = problem.TimeElapsed.Days * -1;
    if (problem.problemPriority == 5) color = "darkred"; //color coding by priority and days elapsed
    if (problem.problemPriority == 4) color = "red";
    if (problem.problemPriority == 3) color = "indianred";
    if (problem.problemPriority == 2) color = "lightcoral";
    if (daysElapsed > 7) color = "saddlebrown";

    <div class="col-lg-3 col-md-12 mb-4 mb-lg-0 " style=" padding: 10px 10px 10px 10px;">
        <div class="card" style=" background:linear-gradient(135deg, #f3f6f9 80%, @color 30%); border-radius: 4px; border-style:hidden;">
            <button class="btn btn-outline-secondary " @onclick="() => viewDetails(problem.Id)" style="border-style:hidden;">



                <ul style="text-align:left; padding:5px 5px 5px 5px;">
                    <li>@Loc["Problem_What"]: @problem.What</li>
                    <li>@Loc["Problem_Where"]: @problem.Where</li>
                    <li>@Loc["Problem_Date created"]: @problem.DateCreated.ToString("yyyy-MM-dd")</li>
                    <li>@Loc["Problem_Days elapsed"]: @daysElapsed</li>
                    <li>@Loc["Problem_Priority"]: @problem.problemPriority</li>
                </ul>


            </button>
        </div>

    </div>
}


@* background-color:#f3f6f9; *@

@code {
    [Parameter]
    public Problem problem { get; set; }





    private void viewDetails(int ProblemId)
    {
        NavigationManager.NavigateTo($"/Problems/details/{ProblemId}", true);
    }

}
